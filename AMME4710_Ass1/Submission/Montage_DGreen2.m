function [BW,maskedRGBImage] = Montage_DGreen2(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder App. The colorspace and
%  minimum/maximum values for each channel of the colorspace were set in the
%  App and result in a binary mask BW and a composite image maskedRGBImage,
%  which shows the original RGB image values under the mask BW.

% Auto-generated by colorThresholder app on 25-Aug-2017
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2lab(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 100.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = -71.246;
channel2Max = 80.370;

% Define thresholds for channel 3 based on histogram settings
channel3Min = -75.502;
channel3Max = 93.938;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);

% Create mask based on selected regions of interest on point cloud projection
I = double(I);
[m,n,~] = size(I);
polyBW = false([m,n]);
I = reshape(I,[m*n 3]);
temp = I(:,1);
I(:,1) = I(:,2);
I(:,2) = I(:,3);
I(:,3) = temp;
clear temp

% Project 3D data into 2D projected view from current camera view point within app
J = rotateColorSpace(I);

% Apply polygons drawn on point cloud in app
polyBW = applyPolygons(J,polyBW);

% Combine both masks
BW = sliderBW & polyBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end

function J = rotateColorSpace(I)

% Translate the data to the mean of the current image within app
shiftVec = [-0.367058 2.754891 74.718816];
I = I - shiftVec;
I = [I ones(size(I,1),1)]';

% Apply transformation matrix
tMat = [-0.006020 -0.001294 0.000000 0.603310;
    -0.001439 0.005313 0.000911 -0.433423;
    0.000198 -0.000730 0.006635 8.215101;
    0.000000 0.000000 0.000000 1.000000];

J = (tMat*I)';
end

function polyBW = applyPolygons(J,polyBW)

% Define each manually generated ROI
hPoints(1).data = [0.994452 -0.117434;
    0.990603 -0.175325;
    0.985792 -0.215528;
    0.980981 -0.246081;
    0.973283 -0.281459;
    0.953076 -0.295932;
    0.931908 -0.289499;
    0.907852 -0.300756;
    0.892457 -0.307188;
    0.888608 -0.313621;
    0.881872 -0.339350;
    0.866477 -0.342566;
    0.857817 -0.353823;
    0.838572 -0.357039;
    0.823177 -0.358647;
    0.805857 -0.365079;
    0.803933 -0.376336;
    0.800084 -0.397241;
    0.790462 -0.414930;
    0.781802 -0.429403;
    0.766406 -0.426187;
    0.753897 -0.429403;
    0.755822 -0.411714;
    0.750048 -0.403673;
    0.741388 -0.403673;
    0.732729 -0.411714;
    0.729842 -0.414930;
    0.725993 -0.414930;
    0.714446 -0.422970;
    0.701938 -0.411714;
    0.695202 -0.408498;
    0.682693 -0.385984;
    0.693278 -0.385984;
    0.708673 -0.342566;
    0.729842 -0.310405;
    0.760633 -0.270202;
    0.784688 -0.244473;
    0.803933 -0.215528;
    0.816441 -0.193014;
    0.831837 -0.162461;
    0.844346 -0.131907;
    0.870326 -0.102962;
    0.916512 -0.074016;
    0.940567 -0.061151;
    0.965585 -0.056327;
    0.977132 -0.075624;
    1.001187 -0.099746];

% Iteratively apply each ROI
for ii = 1:length(hPoints)
    if size(hPoints(ii).data,1) > 2
        in = inpolygon(J(:,1),J(:,2),hPoints(ii).data(:,1),hPoints(ii).data(:,2));
        in = reshape(in,size(polyBW));
        polyBW = polyBW | in;
    end
end

end
