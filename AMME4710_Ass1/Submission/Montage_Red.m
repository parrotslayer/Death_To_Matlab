function [BW,maskedRGBImage] = Montage_Red(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder App. The colorspace and
%  minimum/maximum values for each channel of the colorspace were set in the
%  App and result in a binary mask BW and a composite image maskedRGBImage,
%  which shows the original RGB image values under the mask BW.

% Auto-generated by colorThresholder app on 25-Aug-2017
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2lab(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 100.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = -71.246;
channel2Max = 80.370;

% Define thresholds for channel 3 based on histogram settings
channel3Min = -75.502;
channel3Max = 93.938;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);

% Create mask based on selected regions of interest on point cloud projection
I = double(I);
[m,n,~] = size(I);
polyBW = false([m,n]);
I = reshape(I,[m*n 3]);
temp = I(:,1);
I(:,1) = I(:,2);
I(:,2) = I(:,3);
I(:,3) = temp;
clear temp

% Project 3D data into 2D projected view from current camera view point within app
J = rotateColorSpace(I);

% Apply polygons drawn on point cloud in app
polyBW = applyPolygons(J,polyBW);

% Combine both masks
BW = sliderBW & polyBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end

function J = rotateColorSpace(I)

% Translate the data to the mean of the current image within app
shiftVec = [-0.367058 2.754891 74.718816];
I = I - shiftVec;
I = [I ones(size(I,1),1)]';

% Apply transformation matrix
tMat = [-0.006192 0.000098 0.000000 0.491068;
    0.000110 0.005516 0.000000 -0.508776;
    0.000000 0.000000 0.006697 8.160254;
    0.000000 0.000000 0.000000 1.000000];

J = (tMat*I)';
end

function polyBW = applyPolygons(J,polyBW)

% Define each manually generated ROI
hPoints(1).data = [0.170953 -0.417221;
    0.123889 -0.391413;
    0.083317 -0.368064;
    0.028139 -0.275894;
    -0.013245 -0.231653;
    -0.008376 -0.161604;
    -0.001885 -0.140712;
    0.015155 -0.145628;
    0.062219 -0.180038;
    0.088997 -0.205845;
    0.119020 -0.213219;
    0.140118 -0.230424;
    0.165273 -0.253773;
    0.181502 -0.280810;
    0.205845 -0.294328;
    0.222885 -0.311533;
    0.232623 -0.333654;
    0.251286 -0.350859;
    0.287801 -0.371750;
    0.318636 -0.396329;
    0.360019 -0.425823;
    0.372191 -0.470064;
    0.342979 -0.516764;
    0.301595 -0.492185;
    0.233434 -0.461462];

% Iteratively apply each ROI
for ii = 1:length(hPoints)
    if size(hPoints(ii).data,1) > 2
        in = inpolygon(J(:,1),J(:,2),hPoints(ii).data(:,1),hPoints(ii).data(:,2));
        in = reshape(in,size(polyBW));
        polyBW = polyBW | in;
    end
end

end
